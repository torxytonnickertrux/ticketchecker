#!/usr/bin/env python3
"""
Script de valida√ß√£o final do sistema de pagamentos
"""
import os
import sys
import django
from pathlib import Path
import requests
import json
import time
import hmac
import hashlib

# Configurar Django
BASE_DIR = Path(__file__).resolve().parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')
django.setup()

from django.conf import settings
from communication.models import WebhookEvent, WebhookLog, PaymentNotification
from events.models import Event, Ticket, Purchase, User
from django.utils import timezone


class SystemValidator:
    """
    Validador final do sistema de pagamentos
    """
    
    def __init__(self):
        self.base_url = "https://ingressoptga.pythonanywhere.com"
        self.webhook_secret = "1780494c4a6fdde056486e2f07b041cda3b81c6def03e746eae273bb830c784d"
        self.validation_results = []
    
    def validate_configuration(self):
        """Validar configura√ß√µes do sistema"""
        print("üîß Validando configura√ß√µes...")
        
        checks = [
            ("SECRET_KEY", settings.SECRET_KEY, "Configurado"),
            ("DEBUG", settings.DEBUG, "Configurado"),
            ("ALLOWED_HOSTS", settings.ALLOWED_HOSTS, "Configurado"),
            ("MERCADO_PAGO_ACCESS_TOKEN", settings.MERCADO_PAGO_ACCESS_TOKEN, "Configurado"),
            ("MERCADO_PAGO_PUBLIC_KEY", settings.MERCADO_PAGO_PUBLIC_KEY, "Configurado"),
            ("WEBHOOK_SECRET_KEY", settings.WEBHOOK_SECRET_KEY, "Configurado"),
            ("SITE_URL", settings.SITE_URL, "Configurado"),
        ]
        
        for name, value, expected in checks:
            if value:
                print(f"  ‚úÖ {name}: {expected}")
                self.validation_results.append((name, True, "OK"))
            else:
                print(f"  ‚ùå {name}: N√£o configurado")
                self.validation_results.append((name, False, "N√£o configurado"))
    
    def validate_database(self):
        """Validar banco de dados"""
        print("\nüóÑÔ∏è Validando banco de dados...")
        
        try:
            # Verificar se as tabelas existem
            webhook_count = WebhookEvent.objects.count()
            log_count = WebhookLog.objects.count()
            notification_count = PaymentNotification.objects.count()
            purchase_count = Purchase.objects.count()
            event_count = Event.objects.count()
            ticket_count = Ticket.objects.count()
            user_count = User.objects.count()
            
            print(f"  ‚úÖ WebhookEvent: {webhook_count} registros")
            print(f"  ‚úÖ WebhookLog: {log_count} registros")
            print(f"  ‚úÖ PaymentNotification: {notification_count} registros")
            print(f"  ‚úÖ Purchase: {purchase_count} registros")
            print(f"  ‚úÖ Event: {event_count} registros")
            print(f"  ‚úÖ Ticket: {ticket_count} registros")
            print(f"  ‚úÖ User: {user_count} registros")
            
            self.validation_results.append(("Database", True, "OK"))
            
        except Exception as e:
            print(f"  ‚ùå Erro no banco de dados: {e}")
            self.validation_results.append(("Database", False, str(e)))
    
    def validate_webhook_endpoints(self):
        """Validar endpoints de webhook"""
        print("\nüîó Validando endpoints de webhook...")
        
        endpoints = [
            ("/comunication/test/", "GET", "Teste de conectividade"),
            ("/comunication/status/", "GET", "Status do sistema"),
        ]
        
        for endpoint, method, description in endpoints:
            try:
                url = f"{self.base_url}{endpoint}"
                
                if method == "GET":
                    response = requests.get(url, timeout=30)
                else:
                    response = requests.post(url, timeout=30)
                
                if response.status_code == 200:
                    print(f"  ‚úÖ {endpoint}: {description} - OK")
                    self.validation_results.append((endpoint, True, "OK"))
                else:
                    print(f"  ‚ùå {endpoint}: {description} - Erro {response.status_code}")
                    self.validation_results.append((endpoint, False, f"Erro {response.status_code}"))
                    
            except Exception as e:
                print(f"  ‚ùå {endpoint}: {description} - Erro: {e}")
                self.validation_results.append((endpoint, False, str(e)))
    
    def validate_webhook_security(self):
        """Validar seguran√ßa dos webhooks"""
        print("\nüîí Validando seguran√ßa dos webhooks...")
        
        # Teste com assinatura inv√°lida
        payload = json.dumps({
            "id": "test_security_validation",
            "type": "payment",
            "data": {"id": "test_payment"}
        })
        
        timestamp = str(int(time.time()))
        invalid_signature = "invalid_signature"
        
        try:
            response = requests.post(
                f"{self.base_url}/comunication/build/teste",
                data=payload,
                headers={
                    'Content-Type': 'application/json',
                    'X-Signature': invalid_signature,
                    'X-Signature-Ts': timestamp
                },
                timeout=30
            )
            
            if response.status_code == 400:
                print("  ‚úÖ Assinatura inv√°lida rejeitada corretamente")
                self.validation_results.append(("Webhook Security", True, "OK"))
            else:
                print(f"  ‚ùå Assinatura inv√°lida aceita incorretamente: {response.status_code}")
                self.validation_results.append(("Webhook Security", False, "Falha na valida√ß√£o"))
                
        except Exception as e:
            print(f"  ‚ùå Erro ao testar seguran√ßa: {e}")
            self.validation_results.append(("Webhook Security", False, str(e)))
    
    def validate_webhook_processing(self):
        """Validar processamento de webhook"""
        print("\n‚öôÔ∏è Validando processamento de webhook...")
        
        # Criar dados de teste
        user, created = User.objects.get_or_create(
            username='test_validation',
            defaults={
                'email': 'test@validation.com',
                'first_name': 'Test',
                'last_name': 'Validation'
            }
        )
        
        event, created = Event.objects.get_or_create(
            name='Evento Valida√ß√£o',
            defaults={
                'description': 'Evento para valida√ß√£o',
                'date': timezone.now() + timezone.timedelta(days=30),
                'location': 'Local Valida√ß√£o',
                'is_active': True
            }
        )
        
        ticket, created = Ticket.objects.get_or_create(
            event=event,
            type='Standard',
            defaults={
                'price': 50.00,
                'quantity': 100,
                'is_active': True
            }
        )
        
        purchase = Purchase.objects.create(
            ticket=ticket,
            user=user,
            quantity=1,
            total_price=50.00,
            status='pending'
        )
        
        # Dados do webhook
        payload = json.dumps({
            "id": "test_validation_processing",
            "type": "payment",
            "data": {"id": "test_payment_validation"}
        })
        
        timestamp = str(int(time.time()))
        signature = self._create_signature(payload, timestamp)
        
        try:
            response = requests.post(
                f"{self.base_url}/comunication/build/teste",
                data=payload,
                headers={
                    'Content-Type': 'application/json',
                    'X-Signature': signature,
                    'X-Signature-Ts': timestamp
                },
                timeout=30
            )
            
            if response.status_code == 200:
                print("  ‚úÖ Webhook processado com sucesso")
                
                # Verificar se o evento foi criado
                webhook_event = WebhookEvent.objects.filter(event_id="test_validation_processing").first()
                if webhook_event:
                    print("  ‚úÖ Evento webhook criado")
                    self.validation_results.append(("Webhook Processing", True, "OK"))
                else:
                    print("  ‚ùå Evento webhook n√£o criado")
                    self.validation_results.append(("Webhook Processing", False, "Evento n√£o criado"))
            else:
                print(f"  ‚ùå Erro no processamento: {response.status_code}")
                self.validation_results.append(("Webhook Processing", False, f"Erro {response.status_code}"))
                
        except Exception as e:
            print(f"  ‚ùå Erro ao processar webhook: {e}")
            self.validation_results.append(("Webhook Processing", False, str(e)))
    
    def validate_mercado_pago_integration(self):
        """Validar integra√ß√£o com Mercado Pago"""
        print("\nüí≥ Validando integra√ß√£o com Mercado Pago...")
        
        try:
            import mercadopago
            
            # Testar SDK
            mp = mercadopago.SDK(settings.MERCADO_PAGO_ACCESS_TOKEN)
            
            # Testar cria√ß√£o de prefer√™ncia
            preference_data = {
                "items": [
                    {
                        "title": "Teste de Valida√ß√£o",
                        "quantity": 1,
                        "unit_price": 10.00,
                        "currency_id": "BRL"
                    }
                ],
                "external_reference": "test_validation"
            }
            
            result = mp.preference().create(preference_data)
            
            if result["status"] == 201:
                print("  ‚úÖ SDK do Mercado Pago funcionando")
                print("  ‚úÖ Cria√ß√£o de prefer√™ncia funcionando")
                self.validation_results.append(("Mercado Pago Integration", True, "OK"))
            else:
                print(f"  ‚ùå Erro na cria√ß√£o de prefer√™ncia: {result}")
                self.validation_results.append(("Mercado Pago Integration", False, "Erro na cria√ß√£o de prefer√™ncia"))
                
        except Exception as e:
            print(f"  ‚ùå Erro na integra√ß√£o com Mercado Pago: {e}")
            self.validation_results.append(("Mercado Pago Integration", False, str(e)))
    
    def validate_system_performance(self):
        """Validar performance do sistema"""
        print("\n‚ö° Validando performance do sistema...")
        
        endpoints = [
            ("/comunication/test/", "GET"),
            ("/comunication/status/", "GET"),
        ]
        
        for endpoint, method in endpoints:
            try:
                url = f"{self.base_url}{endpoint}"
                start_time = time.time()
                
                if method == "GET":
                    response = requests.get(url, timeout=30)
                else:
                    response = requests.post(url, timeout=30)
                
                end_time = time.time()
                response_time = (end_time - start_time) * 1000  # em ms
                
                if response.status_code == 200 and response_time < 5000:  # 5 segundos
                    print(f"  ‚úÖ {endpoint}: {response_time:.2f}ms - OK")
                    self.validation_results.append((f"Performance {endpoint}", True, f"{response_time:.2f}ms"))
                else:
                    print(f"  ‚ùå {endpoint}: {response_time:.2f}ms - Lento ou erro")
                    self.validation_results.append((f"Performance {endpoint}", False, f"{response_time:.2f}ms"))
                    
            except Exception as e:
                print(f"  ‚ùå {endpoint}: Erro - {e}")
                self.validation_results.append((f"Performance {endpoint}", False, str(e)))
    
    def _create_signature(self, payload, timestamp):
        """Criar assinatura v√°lida para teste"""
        validation_string = f"{timestamp}{payload}"
        return hmac.new(
            self.webhook_secret.encode('utf-8'),
            validation_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
    
    def generate_validation_report(self):
        """Gerar relat√≥rio de valida√ß√£o"""
        print("\n" + "=" * 60)
        print("üìä RELAT√ìRIO DE VALIDA√á√ÉO FINAL")
        print("=" * 60)
        
        # Estat√≠sticas
        total_checks = len(self.validation_results)
        successful_checks = sum(1 for _, success, _ in self.validation_results if success)
        failed_checks = total_checks - successful_checks
        
        print(f"Total de verifica√ß√µes: {total_checks}")
        print(f"Verifica√ß√µes bem-sucedidas: {successful_checks}")
        print(f"Verifica√ß√µes falharam: {failed_checks}")
        print(f"Taxa de sucesso: {(successful_checks/total_checks)*100:.1f}%")
        
        # Detalhes por verifica√ß√£o
        print(f"\nüìã DETALHES POR VERIFICA√á√ÉO:")
        print("-" * 60)
        
        for name, success, message in self.validation_results:
            status = "‚úÖ" if success else "‚ùå"
            print(f"{status} {name}: {message}")
        
        # Recomenda√ß√µes
        print(f"\nüí° RECOMENDA√á√ïES:")
        print("-" * 60)
        
        if successful_checks == total_checks:
            print("üéâ Sistema validado com sucesso! Pronto para produ√ß√£o.")
            print("üìã Pr√≥ximos passos:")
            print("   1. Configurar webhooks no Mercado Pago")
            print("   2. Executar testes de integra√ß√£o")
            print("   3. Monitorar logs em produ√ß√£o")
            print("   4. Configurar alertas de monitoramento")
        else:
            print("‚ö†Ô∏è Algumas verifica√ß√µes falharam. A√ß√µes recomendadas:")
            print("   1. Revisar verifica√ß√µes que falharam")
            print("   2. Corrigir problemas identificados")
            print("   3. Executar valida√ß√£o novamente")
            print("   4. Verificar configura√ß√µes do sistema")
        
        # Salvar relat√≥rio
        self.save_validation_report()
        
        return successful_checks == total_checks
    
    def save_validation_report(self):
        """Salvar relat√≥rio de valida√ß√£o"""
        report_file = Path(__file__).parent / 'validation_report.txt'
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("RELAT√ìRIO DE VALIDA√á√ÉO DO SISTEMA DE PAGAMENTOS\n")
                f.write("=" * 50 + "\n\n")
                f.write(f"Data: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"Total de verifica√ß√µes: {len(self.validation_results)}\n")
                f.write(f"Verifica√ß√µes bem-sucedidas: {sum(1 for _, success, _ in self.validation_results if success)}\n")
                f.write(f"Verifica√ß√µes falharam: {sum(1 for _, success, _ in self.validation_results if not success)}\n\n")
                
                f.write("DETALHES POR VERIFICA√á√ÉO:\n")
                f.write("-" * 30 + "\n")
                
                for name, success, message in self.validation_results:
                    status = "SUCESSO" if success else "FALHOU"
                    f.write(f"{name}: {status} - {message}\n")
            
            print(f"\nüìÑ Relat√≥rio salvo em: {report_file}")
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar relat√≥rio: {e}")
    
    def run_validation(self):
        """Executar valida√ß√£o completa"""
        print("üöÄ Iniciando valida√ß√£o final do sistema de pagamentos")
        print("=" * 60)
        
        # Executar todas as valida√ß√µes
        self.validate_configuration()
        self.validate_database()
        self.validate_webhook_endpoints()
        self.validate_webhook_security()
        self.validate_webhook_processing()
        self.validate_mercado_pago_integration()
        self.validate_system_performance()
        
        # Gerar relat√≥rio
        return self.generate_validation_report()


def main():
    """Fun√ß√£o principal"""
    validator = SystemValidator()
    success = validator.run_validation()
    
    if success:
        print("\nüéâ Sistema validado com sucesso!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è Sistema com problemas. Verifique o relat√≥rio.")
        sys.exit(1)


if __name__ == "__main__":
    main()