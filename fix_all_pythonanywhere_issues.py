#!/usr/bin/env python3
"""
Script completo para corrigir TODOS os problemas no PythonAnywhere
Execute este script no console do PythonAnywhere
"""

import os
import sys
import sqlite3
import subprocess

def fix_all_issues():
    """Corrige todos os problemas identificados no PythonAnywhere"""
    
    print("üîß Corrigindo TODOS os problemas no PythonAnywhere...")
    
    # 1. Verificar se estamos no diret√≥rio correto
    project_dir = '/home/ingressoptga/ticketchecker'
    if not os.path.exists(project_dir):
        print(f"‚ùå Diret√≥rio do projeto n√£o encontrado: {project_dir}")
        return False
    
    os.chdir(project_dir)
    print(f"‚úÖ Mudando para diret√≥rio: {project_dir}")
    
    # 2. Corrigir problema de logging
    if not fix_logging_issue():
        print("‚ùå Falha ao corrigir problema de logging")
        return False
    
    # 3. Corrigir problema de banco de dados
    if not fix_database_issue():
        print("‚ùå Falha ao corrigir problema de banco de dados")
        return False
    
    # 4. Testar solu√ß√£o completa
    if not test_complete_solution():
        print("‚ùå Falha ao testar solu√ß√£o completa")
        return False
    
    print("\nüéâ TODOS os problemas foram resolvidos!")
    return True

def fix_logging_issue():
    """Corrige problema de logging"""
    
    print("\nüîß Corrigindo problema de logging...")
    
    # Verificar se o arquivo settings_pythonanywhere.py est√° correto
    settings_file = os.path.join(project_dir, 'backend', 'settings_pythonanywhere.py')
    
    if not os.path.exists(settings_file):
        print(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {settings_file}")
        return False
    
    # Ler conte√∫do atual
    with open(settings_file, 'r') as f:
        content = f.read()
    
    # Verificar se tem configura√ß√£o de logging problem√°tica
    if 'logging.FileHandler' in content:
        print("‚ö†Ô∏è  Configura√ß√£o de logging problem√°tica encontrada")
        
        # Criar configura√ß√£o segura
        safe_logging_config = '''
    # Configura√ß√£o de logging segura para PythonAnywhere
    # SEMPRE usar apenas StreamHandler para evitar erros de permiss√£o
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'level': 'INFO',
                'class': 'logging.StreamHandler',
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    }'''
        
        # Substituir configura√ß√£o problem√°tica
        if 'LOGGING = {' in content:
            # Encontrar in√≠cio e fim da configura√ß√£o LOGGING
            start = content.find('LOGGING = {')
            if start != -1:
                # Encontrar o fim da configura√ß√£o LOGGING
                brace_count = 0
                end = start
                for i, char in enumerate(content[start:], start):
                    if char == '{':
                        brace_count += 1
                    elif char == '}':
                        brace_count -= 1
                        if brace_count == 0:
                            end = i + 1
                            break
                
                # Substituir configura√ß√£o
                new_content = content[:start] + safe_logging_config + content[end:]
                
                # Salvar arquivo
                with open(settings_file, 'w') as f:
                    f.write(new_content)
                
                print("‚úÖ Configura√ß√£o de logging corrigida")
            else:
                print("‚ùå N√£o foi poss√≠vel encontrar configura√ß√£o LOGGING")
                return False
        else:
            print("‚úÖ Configura√ß√£o de logging j√° est√° correta")
    else:
        print("‚úÖ Configura√ß√£o de logging j√° est√° correta")
    
    return True

def fix_database_issue():
    """Corrige problema de banco de dados"""
    
    print("\nüîß Corrigindo problema de banco de dados...")
    
    db_path = os.path.join(project_dir, 'db.sqlite3')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Banco de dados n√£o encontrado: {db_path}")
        return False
    
    print(f"‚úÖ Banco de dados encontrado: {db_path}")
    
    # Conectar ao banco
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        print("‚úÖ Conectado ao banco de dados")
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao banco: {e}")
        return False
    
    # Verificar estrutura da tabela events_purchase
    try:
        cursor.execute("PRAGMA table_info(events_purchase);")
        columns = cursor.fetchall()
        
        if not columns:
            print("‚ùå Tabela events_purchase n√£o existe!")
            return False
        
        # Verificar se a coluna mercado_pago_id existe
        mercado_pago_exists = any(col[1] == 'mercado_pago_id' for col in columns)
        
        if not mercado_pago_exists:
            print("‚ùå Coluna mercado_pago_id n√£o existe! Adicionando...")
            
            # Adicionar colunas faltantes
            cursor.execute("""
                ALTER TABLE events_purchase 
                ADD COLUMN mercado_pago_id VARCHAR(100) NULL;
            """)
            
            cursor.execute("""
                ALTER TABLE events_purchase 
                ADD COLUMN payment_date DATETIME NULL;
            """)
            
            cursor.execute("""
                ALTER TABLE events_purchase 
                ADD COLUMN payment_status VARCHAR(50) NULL;
            """)
            
            # Confirmar altera√ß√µes
            conn.commit()
            print("‚úÖ Colunas adicionadas com sucesso")
        else:
            print("‚úÖ Coluna mercado_pago_id j√° existe")
        
        # Verificar estrutura final
        cursor.execute("PRAGMA table_info(events_purchase);")
        columns = cursor.fetchall()
        
        print("\nEstrutura final da tabela events_purchase:")
        for column in columns:
            col_id, col_name, col_type, not_null, default_val, pk = column
            print(f"  - {col_name} ({col_type})")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar/corrigir estrutura: {e}")
        conn.rollback()
        conn.close()
        return False

def test_complete_solution():
    """Testa a solu√ß√£o completa"""
    
    print("\nüß™ Testando solu√ß√£o completa...")
    
    try:
        # Configurar Django
        import django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings_pythonanywhere')
        django.setup()
        
        print("‚úÖ Django configurado com sucesso")
        
        # Testar configura√ß√£o de logging
        import logging
        logger = logging.getLogger('django')
        logger.info("Teste de logging - se voc√™ vir esta mensagem, o logging est√° funcionando")
        print("‚úÖ Sistema de logging funcionando")
        
        # Testar modelos
        from events.models import Event, Ticket, Purchase
        from django.db.models import Sum
        
        print(f"‚úÖ Eventos: {Event.objects.count()}")
        print(f"‚úÖ Ingressos: {Ticket.objects.count()}")
        print(f"‚úÖ Compras: {Purchase.objects.count()}")
        
        # Testar consultas do dashboard
        total_revenue = Purchase.objects.filter(status='confirmed').aggregate(
            total=Sum('total_price')
        )['total'] or 0
        print(f"‚úÖ Receita total: R$ {total_revenue}")
        
        # Testar consulta de compras recentes
        recent_purchases = Purchase.objects.filter(status='confirmed').order_by('-purchase_date')[:10]
        print(f"‚úÖ Compras recentes: {recent_purchases.count()}")
        
        # Testar acesso ao campo mercado_pago_id
        purchases_with_mp_id = Purchase.objects.exclude(mercado_pago_id__isnull=True).count()
        print(f"‚úÖ Compras com ID Mercado Pago: {purchases_with_mp_id}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar solu√ß√£o: {e}")
        return False

def check_wsgi_configuration():
    """Verifica configura√ß√£o do WSGI"""
    
    print("\nüîç Verificando configura√ß√£o do WSGI...")
    
    # Verificar arquivo WSGI do PythonAnywhere
    wsgi_file = '/var/www/ingressoptga_pythonanywhere_com_wsgi.py'
    
    if os.path.exists(wsgi_file):
        print(f"‚úÖ Arquivo WSGI encontrado: {wsgi_file}")
        
        with open(wsgi_file, 'r') as f:
            content = f.read()
        
        # Verificar se est√° usando o m√≥dulo correto
        if 'backend.settings_pythonanywhere' in content:
            print("‚úÖ WSGI configurado para usar settings_pythonanywhere")
        else:
            print("‚ö†Ô∏è  WSGI pode n√£o estar usando settings_pythonanywhere")
            
        # Verificar caminho do projeto
        if '/home/ingressoptga/ticketchecker' in content:
            print("‚úÖ Caminho do projeto correto no WSGI")
        else:
            print("‚ö†Ô∏è  Caminho do projeto pode estar incorreto no WSGI")
    else:
        print(f"‚ö†Ô∏è  Arquivo WSGI n√£o encontrado: {wsgi_file}")
        print("   Verifique a configura√ß√£o no painel do PythonAnywhere")

def main():
    """Fun√ß√£o principal"""
    
    print("üéØ Iniciando corre√ß√£o completa de problemas no PythonAnywhere...")
    
    # Verificar configura√ß√£o do WSGI
    check_wsgi_configuration()
    
    # Corrigir todos os problemas
    if not fix_all_issues():
        print("‚ùå Falha ao corrigir todos os problemas")
        return False
    
    print("\nüéâ CORRE√á√ÉO COMPLETA FINALIZADA!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Reinicie sua aplica√ß√£o web no PythonAnywhere")
    print("2. Teste o acesso ao dashboard: https://ingressoptga.pythonanywhere.com/dashboard/")
    print("3. Verifique se n√£o h√° mais erros nos logs")
    print("4. Teste todas as funcionalidades do sistema")
    
    return True

if __name__ == "__main__":
    main()